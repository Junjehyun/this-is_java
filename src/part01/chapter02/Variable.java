package part01.chapter02;

public class Variable {

    /**
     * 2.1 변수 선언
     * 
     * 컴퓨터 메모리는 수 많은 번지들로 구성된 데이터 저장 공간이다.
     * 프로그램은 데이터를 메모리에 저장하고 읽는 작업을 번번히 수행한다. 
     * 이 때 데이터를 어디에, 어떤 방식으로 저장할지 정해져 있지 않다면 메모리 관리가 무척 어려워 진다. 
     * 프로그래밍 언어는 이 문제를 해결하기 위해 변수를 사용한다.
     * 
     * 변수 = 하나의 값을 저장할 수 있는 메모리 번지에 붙여진 이름 
     * 
     * 자바의 변수는 다양한 타입의 값을 저장할 수 없다. 즉, 정수형 변수에는 정수값만 저장할 수 있고,
     * 실수형 변수에는 실수값만 저장할 수 있다.
     * 
     * 변수를 사용하려면 변수 선언이 필요한데, 
     * 변수 선언은 어떤 타입의 데이터를 저장할 것인지와 변수 이름이 무엇인지를 결정하는 것이다. 
     * 
     * 변수 이름은 첫 번째 글자가 문자여야 하고, 중간부터는 문자,숫자,$,_를 사용할 수 있다.
     * 또한, 첫 문자를 소문자로 시작하되, 캐멀 스타일로 작성하는 것이 관례이다.
     * 
     * 1. 자바 소스 파일명(클래스명)은 대문자로 시작하는 것이 관례이다.
     * Week.java
     * MemberGrade.java
     * ProductKind.java
     * 
     * 2. 변수명은 소문자로 시작하는 것이 관례이다.
     * score
     * mathScore
     * sportsCar
     * 
     * 변수가 선언되었다면 값을 저장할 수 있는데, 이때 대입 연산자인 =를 사용한다. 수학에서 등호(=)는 같다는 의미이지만,
     * 프로그래밍에서는 오른쪽의 값을 왼쪽의 변수에 대입하는 연산자로 사용된다.
     * 
     * int score; // 변수 선언
     * score = 90; // 변수에 값 대입
     * 
     * 변수 이름은 어떤 값을 저장하고 있는지 쉽게 알 수 있도록 의미 있는 이름을 지어주는 것이 좋다. 변수 이름의 길이는
     * 프로그램 실행과는 무관하기 때문에 충분히 길어도 상관없다. 그리고 변수 이름에 한글을 포함하지 않는 것이 관례이다.
     * 
     * 변수 선언은 저장되는 값의 타입과 이름만 결정한 것이지, 아직 메모리에 할당된 것은 아니다. 
     * 변수에 최초로 값이 대입될 때 메모리에 할당되고, 해당 메모리에 값이 저장된다. 
     * 
     * 변수에 최초로 값을 대입하는 행위를 변수 초기화라고 하고, 이때의 값을 초기값이라고 한다. 
     * 초기값은 다음과 같이 변수를 선언함과 동시에 대입할 수도 있다.
     * 
     * int score = 90; // 90을 score에 대입
     * 
     * 초기화 되지 않은 변수는 아직 메모리에 할당되지 않았기 때문에 변수를 통해 메모리 값을 읽을 수 없다.
     * 따라서 다음은 잘못된 코딩이다.
     * 
     * int value;
     * int result = value + 10; // value가 초기화되지 않았기 때문에 오류 발생 (value에 아무 값도 안넣음.)
     * 
     * 변수 value가 선언 되었지만, 초기화 되지 않았기 때문에 value + 10에서 value 변수값은 읽어올 수 없다. 
     * 따라서 위 코드는 다음과 같이 변경되어야한다.
     * 
     * int value = 30; // 변수 value가 30으로 초기화됨
     * int result = value + 10; // value값 30을 읽고 10을 더해 변수 result에 저장 
     * 
     * 다음 예제는 초기화 되지 않은 변수를 연산식에 사용할 경우 컴파일 에러가 발생하는걸 보여준다. 
     * 다음 예제는 VariableInitilizationExample.java 참조
     * 
     * 
     */    
    
}
